
import { getAiConfig } from '../config/aiConfig';
import { Task } from '../types';
import { Note } from '../types';

// Template for generating the report prompt
const REPORT_PROMPT_TEMPLATE = `
The user wants to [Objective/Goal]. Provide a comprehensive report covering the following areas:
1. **Selection Criteria**: [Details on how to select the appropriate items/options]
2. **Implementation Steps**: [Step-by-step guide on how to implement the solution]
3. **Precautions/Considerations**: [Important factors to consider and potential challenges]
4. **Suggested Options/Recommendations**: [Recommended choices based on certain criterias]
Additional Context: [Any relevant background information]
`;

/**
 * Service to handle AutoTask processing
 */
export const autoTaskService = {
  /**
   * Generate a prompt for the AutoTask
   * @param taskTitle The title of the task
   * @returns Generated prompt for AI
   */
  generatePrompt: (taskTitle: string): string => {
    // Extract the objective from the task title
    const objective = taskTitle.trim();
    
    // Replace the placeholder in the template
    let prompt = REPORT_PROMPT_TEMPLATE.replace('[Objective/Goal]', objective);
    
    // Clean up any remaining placeholders with empty strings
    prompt = prompt.replace(/\[.*?\]/g, '');
    
    return prompt;
  },
  
  /**
   * Process an AutoTask by sending it to the AI
   * @param task The task to process
   * @returns Promise with the generated note content
   */
  processAutoTask: async (task: Task): Promise<{ title: string; content: string }> => {
    const config = getAiConfig();
    
    if (!config.apiKey) {
      throw new Error("AI API key is not set. Please add your Gemini API key in the Settings.");
    }
    
    try {
      // Generate the prompt for this specific task
      const promptForTask = autoTaskService.generatePrompt(task.title);
      
      // First call: Generate the specialized prompt
      const promptResponse = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${config.model}:generateContent?key=${config.apiKey}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contents: [
            { 
              role: "user", 
              parts: [{ 
                text: `You are an expert researcher. Create a detailed prompt for generating a comprehensive report about the following task: "${task.title}". The prompt should cover selection criteria, implementation steps, precautions, and recommendations.` 
              }] 
            }
          ],
          generationConfig: {
            temperature: 0.7,
            topP: 0.8,
            topK: 40,
            maxOutputTokens: 1024,
          }
        }),
      });

      if (!promptResponse.ok) {
        const errorData = await promptResponse.json();
        throw new Error(`Error calling AI API: ${errorData?.error?.message || promptResponse.statusText}`);
      }

      const promptData = await promptResponse.json();
      const specializedPrompt = promptData.candidates[0].content.parts[0].text;
      
      // Second call: Generate the actual report with the specialized prompt
      const reportResponse = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/${config.model}:generateContent?key=${config.apiKey}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          contents: [
            { 
              role: "user", 
              parts: [{ text: specializedPrompt }] 
            }
          ],
          generationConfig: {
            temperature: 0.7,
            topP: 0.9,
            topK: 40,
            maxOutputTokens: 4096,
          }
        }),
      });

      if (!reportResponse.ok) {
        const errorData = await reportResponse.json();
        throw new Error(`Error calling AI API: ${errorData?.error?.message || reportResponse.statusText}`);
      }

      const reportData = await reportResponse.json();
      const reportContent = reportData.candidates[0].content.parts[0].text;
      
      return {
        title: `AutoTask Report: ${task.title}`,
        content: `# ${task.title}\n\n${reportContent}\n\n---\n*This report was automatically generated by AiAutoTask*`
      };
    } catch (error) {
      console.error("Error processing AutoTask:", error);
      throw error;
    }
  }
};

export default autoTaskService;
